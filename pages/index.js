import Head from "next/head";
import gsap from "gsap";
import Draggable from "gsap/dist/Draggable";
import { useEffect } from "react";
import tw from "twin.macro";
import { Hero } from "@components/partials/Hero";
import { Navbar } from "@components/partials/Navbar";
import { MySkill } from "@components/partials/MySkill";

export default function Home() {
  useEffect(() => {
    gsap.registerPlugin(Draggable);

    const slides = document.querySelectorAll("#screen-slider");
    const container = document.querySelector("#panelWrap");
    let dots = document.querySelector(".dots");
    let oldSlide = 0;
    let activeSlide = 0;
    let navDots = [];
    let dur = 0.6;
    let offsets = [];
    let toolTipAnims = [];
    let ih = window.innerHeight;
    document.querySelector("#upArrow").addEventListener("click", slideAnim);
    document.querySelector("#downArrow").addEventListener("click", slideAnim);

    // create nev dots and add tooltip listeners
    for (let i = 0; i < slides.length; i++) {
      let tl = gsap.timeline({ paused: true, reversed: true });
      let newDot = document.createElement("div");
      newDot.className = "dot";
      newDot.index = i;
      navDots.push(newDot);
      newDot.addEventListener("click", slideAnim);
      dots.appendChild(newDot);
      offsets.push(-slides[i].offsetTop);
      toolTipAnims.push(tl);
    }

    // get elements positioned
    gsap.set(".dots", { yPercent: -50 });
    gsap.set(".toolTips", { yPercent: -50 });

    // side screen animation with nav dots
    const dotAnim = gsap.timeline({ paused: true });
    dotAnim.to(
      ".dot",
      {
        stagger: { each: 1, yoyo: true, repeat: 1 },
        scale: 1,
        rotation: 0.1,
        ease: "none",
        width: "50px",
        height: "6px",
        backgroundColor: "#2348F7",
      },
      0.5
    );
    dotAnim.time(1);

    // figure out which of the 4 nav controls called the function
    function slideAnim(e) {
      oldSlide = activeSlide;
      // dragging the panels
      if (this.id === "dragger") {
        activeSlide = offsets.indexOf(this.endY);
      } else {
        if (gsap.isTweening(container)) {
          return;
        }
        // up/down arrow clicks
        if (this.id === "downArrow" || this.id === "upArrow") {
          activeSlide =
            this.id === "downArrow" ? (activeSlide += 1) : (activeSlide -= 1);
          // click on a dot
        } else if (this.className === "dot") {
          activeSlide = this.index;
          // scrollwheel
        } else {
          activeSlide = e.deltaY > 0 ? (activeSlide += 1) : (activeSlide -= 1);
        }
      }
      // make sure we're not past the end or beginning slide
      activeSlide = activeSlide < 0 ? 0 : activeSlide;
      activeSlide =
        activeSlide > slides.length - 1 ? slides.length - 1 : activeSlide;
      if (oldSlide === activeSlide) {
        return;
      }
      // if we're dragging we don't animate the container
      if (this.id != "dragger") {
        gsap.to(container, dur, {
          y: offsets[activeSlide],
          ease: "power2.inOut",
          onUpdate: tweenDot,
        });
      }
    }

    window.addEventListener("wheel", slideAnim);
    window.addEventListener("resize", newSize);

    // make the container a draggable element
    let dragMe = Draggable.create(container, {
      type: "y",
      edgeResistance: 1,
      onDragEnd: slideAnim,
      onDrag: tweenDot,
      onThrowUpdate: tweenDot,
      snap: offsets,
      inertia: true,
      zIndexBoost: false,
      allowNativeTouchScrolling: false,
      bounds: "#masterWrap",
    });

    dragMe[0].id = "dragger";
    newSize();

    // resize all panels and refigure draggable snap array
    function newSize() {
      offsets = [];
      ih = window.innerHeight;
      gsap.set("#panelWrap", { height: slides.length * ih });
      gsap.set(slides, { height: ih });
      for (let i = 0; i < slides.length; i++) {
        offsets.push(-slides[i].offsetTop);
      }
      gsap.set(container, { y: offsets[activeSlide] });
      dragMe[0].vars.snap = offsets;
    }

    // tween the dot animation as the draggable moves
    function tweenDot() {
      gsap.set(dotAnim, {
        time: Math.abs(gsap.getProperty(container, "y") / ih) + 1,
      });
    }
  }, []);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />
      <MainHome>
        <MasterWrap id="masterWrap">
          <PanelWrap id="panelWrap">
            <ScreenSlider id="screen-slider">
              <Hero />
            </ScreenSlider>
            <ScreenSlider id="screen-slider">
              <div className="w-full flex flex-col-reverse lg:grid lg:grid-cols-2">
                <MySkill />
                <AboutMe />
              </div>
            </ScreenSlider>
            <ScreenSlider id="screen-slider">
              <h3>Side Dot Animation</h3>
              <p>
                See that animation on the right with the navigation dots? Its
                time is based on the position of the draggable element. Keep an
                eye on it as you drag the slides.
              </p>
            </ScreenSlider>
            <ScreenSlider id="screen-slider">
              <h3>Random dog </h3>
              <p>Why? Because dogs are cool.</p>
            </ScreenSlider>
          </PanelWrap>
        </MasterWrap>
        <div className="lg:hidden block">
          <SliderArrow />
        </div>
        <div className="lg:block hidden">
          <SliderMarker />
        </div>
      </MainHome>
    </>
  );
}

const SliderMarker = () => {
  return <div className="dots"></div>;
};

const SliderArrow = () => {
  return(
    <>
      <svg
          id="downArrow"
          className="arrow bg-main-primary"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 100 100"
        >
          <g strokeLinejoin="round" strokeLinecap="round">
            <circle r="46" cx="50" cy="50" />
            <polyline points="25 40, 50 70, 75 40"></polyline>
          </g>
        </svg>
        <svg
          id="upArrow"
          className="arrow bg-main-primary"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 100 100"
        >
          <g strokeLinejoin="round" strokeLinecap="round">
            <circle r="46" cx="50" cy="50" />
            <polyline points="25 60, 50 30, 75 60"></polyline>
          </g>
        </svg>
    </>
  )
}

const AboutMe = () => {
  return (
    <div className="lg:bg-gray-100 bg-transparent lg:min-h-screen w-full flex flex-col justify-center">
      <div className="lg:max-w-lg w-full lg:mx-24 p-10">
        <div className="w-full space-y-2">
          <h3 className="text-sm font-normal text-main-dark uppercase">
            Summary
          </h3>
          <h1 className="text-black text-2xl font-bold uppercase">
            ABOUT <span className="text-main-primary">ME</span>
          </h1>
        </div>
        <div className="mt-6 sm:mt-12">
          <p className="text-sm md:text-lg font-semibold text-main-darkest">
            I have a background in information technology, with a focus on
            Frontend Development and UI Design. I am the type of person who
            takes every opportunity to learn something new. That's why I enjoy
            challenges. From there, I was under pressure to learn quickly and
            gain a lot of new experiences. Through innovation, passion and
            expertise. I want to create a high quality website and application.
            Apart from coding, I love Traveling, Fitness & helping others in the
            community.
          </p>
        </div>
      </div>
    </div>
  );
};

let MainHome = tw.main`
  opacity-100
`;
let MasterWrap = tw.div`
  w-full h-full absolute overflow-hidden
`;
let PanelWrap = tw.div` 
  w-full h-screen
`;
let ScreenSlider = tw.section`
  w-full h-screen  bg-white relative
`;
